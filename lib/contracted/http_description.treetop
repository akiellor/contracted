grammar HttpDescription
  rule http
    status_line headers new_line body
  end

  rule body
    .*
  end

  rule headers
    header* (wildcard new_line)? {
      def values
        elements.collect {|e| e.elements }.flatten.compact.select {|e| e.respond_to?(:value) }.map(&:value)
      end
    } 
  end

  rule wildcard
    '...' {
      def value
        text_value
      end
    }
  end

  rule header
    header_key ':' white_space header_value new_line {
      def value
        {header_key.text_value => header_value.text_value}
      end
    }
  end

  rule header_key
    [^:]+
  end

  rule header_value
    [^\n]+ 
  end

  rule status_line
    'HTTP/' version space status space reason new_line
  end

  rule version
    [0-9.]+
  end

  rule white_space
    [\s]+
  end

  rule space
    ' '
  end

  rule reason_word
    [A-Z]+
  end

  rule reason
    reason_word (space reason_word)*
  end

  rule status
    [0-9] 3..3
  end

  rule new_line
    [\n]
  end
end

